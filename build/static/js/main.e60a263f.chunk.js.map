{"version":3,"sources":["Styles/paginated.module.css","Styles/invest.module.css","Styles/investAmount.module.css","Styles/aboutRepo.module.css","Styles/loading.module.css","Context/AppContext.js","Components/ContentLoader/Loading.jsx","Components/Paginated/PaginatedItems.jsx","Components/Invest/AboutRepo.jsx","Components/Invest/DeclareInvest.jsx","Components/Invest/SubmitInvest.jsx","Components/Invest/Invest.jsx","Components/App.jsx","index.js"],"names":["module","exports","AppContext","createContext","AppProvider","children","useState","repoList","setRepoList","isRepoListLoaded","setIsRepoListLoaded","investorsList","setInvestorsList","useEffect","fetch","then","response","json","data","lastPageOpened","setLastPageOpened","Provider","value","handleMustRefresh","handleSetLastPageOpened","index","Loading","className","loaderStyles","loadingWrapper","size","Items","currentItems","map","item","id","DisplayItems","useContext","ColorButton","styled","Button","backgroundColor","borderColor","color","isInvestorListVisible","setIsInvestorListVisible","repoInvestorsList","setRepoInvestorsList","getInvestorsArray","i","length","projectID","push","paginatedStyles","repoWrapper","name","owner","login","description","to","button","variant","investorsListHeader","sum","s","parseFloat","investAmount","handleDisplatInvestAmount","toggleVisibilityList","onClick","investorsListDonations","investor","DisplayInvestorRow","investorEmail","PaginatedItems","itemsPerPage","setCurrentItems","pageCount","setPageCount","itemOffset","setItemOffset","endOffset","slice","Math","ceil","resultsWrapper","navigator","breakLabel","nextLabel","onPageChange","e","newOffset","selected","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","forcePage","AboutRepo","repo","history","useHistory","styles","aboutRepo","investStyles","goBackBtn","goBack","repoDetails","undefined","href","url","target","rel","DeclareInvest","isValidationOn","amountAccepted","emailAccepted","setAmount","setEmail","nextStep","declareWrapper","type","onChange","SubmitInvest","projectData","setIsValidationOn","correctData","setCorrectData","isFormSubmitted","setIsFormSubmitted","onSubmit","preventDefault","newInvestorObject","method","headers","body","JSON","stringify","checked","Invest","useParams","repoItem","setRepoItem","setInvestAmount","investAmountAccepted","setInvestAmountAccepted","setInvestorEmail","investorEmailAccepted","setInvestorEmailAccepted","isAmountDeclared","setIsAmountDeclared","investWrapper","test","App","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,eAAiB,kCAAkC,UAAY,6BAA6B,YAAc,+BAA+B,OAAS,0BAA0B,cAAgB,iCAAiC,oBAAsB,uCAAuC,qBAAuB,wCAAwC,uBAAyB,4C,mBCApYD,EAAOC,QAAU,CAAC,UAAY,0BAA0B,cAAgB,gC,mBCAxED,EAAOC,QAAU,CAAC,eAAiB,uC,mBCAnCD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,YAAc,iC,mBCAzED,EAAOC,QAAU,CAAC,eAAiB,kC,2JCCtBC,EAAaC,0BA4CXC,EA1CK,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAElB,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAgDF,oBAAS,GAAzD,mBAAOG,EAAP,KAAyBC,EAAzB,KAUA,EAA0CJ,mBAAS,IAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KACAC,qBAAU,WACNC,MAAM,qCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACFV,EAAYU,GACZR,GAAoB,MAGxBI,MAAM,0CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACFN,EAAiBM,QAEtB,IAGH,MAA4CZ,mBAAS,GAArD,mBAAOa,EAAP,KAAuBC,EAAvB,KAKA,OACI,cAAClB,EAAWmB,SAAZ,CAAqBC,MAAO,CAAEC,kBA/BR,WACtBT,MAAM,0CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACFN,EAAiBM,OA2B4BP,gBAAeJ,WAAUE,mBAAkBU,iBAAgBK,wBALhF,SAACC,GAC7BL,EAAkBK,KAIlB,SACKpB,K,+HC7BEqB,EATC,WACZ,OACI,sBAAKC,UAAWC,IAAaC,eAA7B,UACI,cAAC,IAAD,CAAYC,KAAM,MAClB,8ECOJC,EAAQ,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACf,OACE,mCACGA,GAAgBA,EAAaC,KAAI,SAACC,GAAD,OAAU,cAAC,EAAD,CAA4BhB,KAAMgB,GAAfA,EAAKC,UAKpEC,EAAe,SAAC,GAAc,IAAZlB,EAAW,EAAXA,KAEdP,EAAkB0B,qBAAWnC,GAA7BS,cAEF2B,EAAcC,YAAOC,IAAPD,EAAe,iBAAO,CACxCE,gBAAiB,QACjBC,YAAa,UACbC,MAAO,UACP,UAAW,CACTD,YAAa,eAIjB,EAA0DpC,oBAAS,GAAnE,mBAAOsC,EAAP,KAA8BC,EAA9B,KAKA,EAAkDvC,mBAAS,IAA3D,mBAAOwC,EAAP,KAA0BC,EAA1B,KACAlC,qBAAU,WAGR,IAFA,IAAMmC,EAAoB,GAElBC,EAAI,EAAGA,EAAItC,EAAcuC,OAAQD,IACpCtC,EAAcsC,GAAGE,YAAcjC,EAAKiB,IACrCa,EAAkBI,KAAKzC,EAAcsC,IAGzCF,EAAqBC,KAEpB,CAACrC,IAUF,OACE,sBAAKgB,UAAW0B,IAAgBC,YAAhC,UACI,sDAAyBpC,EAAKqC,QAC9B,yCAAYrC,EAAKsC,MAAMC,SACvB,yEACA,4BAAIvC,EAAKwC,cACT,cAAC,IAAD,CAAMC,GAAE,oBAAezC,EAAKiB,IAAMR,UAAW0B,IAAgBO,OAA7D,SAAqE,cAACtB,EAAD,CAAauB,QAAQ,WAAWlB,MAAM,YAAtC,0BAEtC,IAA7BG,EAAkBI,OAAe,oHACnC,sBAAKvB,UAAW0B,IAAgB1C,cAAhC,UACE,sBAAKgB,UAAW0B,IAAgBS,oBAAhC,UACE,uDAAsB,4BAAIhB,EAAkBI,YAC5C,uEAAiC,8BApBX,WAEhC,IADA,IAAIa,EAAM,EACFC,EAAI,EAAGA,EAAElB,EAAkBI,OAAQc,IACzCD,GAAYE,WAAWnB,EAAkBkB,GAAGE,cAE9C,OAAOH,EAewCI,GAAJ,mBAEnC,qBAAKxC,UAAW0B,IAAgBe,qBAAsBC,QAvCtB,WACxCxB,GAA0BD,IAsClB,SACIA,EAAwB,qCAAE,cAAC,IAAD,IAAF,oCAA4C,qCAAE,cAAC,IAAD,IAAF,2CAEvEA,EACD,qBAAKjB,UAAW0B,IAAgBiB,uBAAhC,SACIxB,EAAkBb,KAAI,SAACsC,EAAUtB,GAAX,OAAiB,cAAC,EAAD,CAA4B/B,KAAMqD,GAATtB,QAC3D,YAOfuB,EAAqB,SAAC,GAAY,IAAXtD,EAAU,EAAVA,KAC3B,OACE,+BACE,+BAAKA,EAAKgD,aAAV,aACA,6BAAKhD,EAAKuD,oBA+CDC,EAzCQ,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAExB,EAAgFtC,qBAAWnC,GAAnFK,EAAR,EAAQA,SAAUE,EAAlB,EAAkBA,iBAAkBU,EAApC,EAAoCA,eAAgBK,EAApD,EAAoDA,wBACpD,EAAwClB,mBAASC,GAAjD,mBAAOyB,EAAP,KAAqB4C,EAArB,KACA,EAAkCtE,mBAAS,GAA3C,mBAAOuE,EAAP,KAAkBC,EAAlB,KACA,EAAoCxE,mBAASa,EAAiBwD,GAA9D,mBAAOI,EAAP,KAAmBC,EAAnB,KAEAnE,qBAAU,WACR,IAAMoE,EAAYF,EAAaJ,EAC/BC,EAAgBrE,EAAS2E,MAAMH,EAAYE,IAC3CH,EAAaK,KAAKC,KAAK7E,EAAS2C,OAASyB,MACxC,CAACI,EAAYJ,EAAcpE,IAQ9B,OACE,mCACIE,EAAmB,qCACrB,qBAAKkB,UAAW0B,IAAgBgC,eAAhC,SACE,cAAC,EAAD,CAAOrD,aAAcA,MAEvB,qBAAKL,UAAW0B,IAAgBiC,UAAhC,SACE,cAAC,IAAD,CACEC,WAAW,MACXC,UAAU,IACVC,aAhBgB,SAACC,GACvB,IAAMC,EAAaD,EAAEE,SAAWjB,EAAgBpE,EAAS2C,OACzD8B,EAAcW,GACdnE,EAAwBkE,EAAEE,WAcpBC,mBAAoB,EACpBhB,UAAWA,EACXiB,cAAc,IACdC,sBAAuB,KACvBC,UAAW7E,SAEH,cAAC,EAAD,O,oEC7HdmB,EAAcC,YAAOC,IAAPD,EAAe,iBAAO,CACtCE,gBAAiB,QACjBC,YAAa,UACbC,MAAO,UACP,UAAW,CACTD,YAAa,eAuBJuD,EAnBG,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEXC,EAAUC,cAEhB,OACI,sBAAKzE,UAAW0E,IAAOC,UAAvB,UACI,eAAC,EAAD,CAAazC,QAAQ,WAAWlC,UAAW4E,IAAaC,UAAWnC,QAAS8B,EAAQM,OAApF,UAA4F,cAAC,IAAD,IAA5F,yBACA,sBAAK9E,UAAW0E,IAAOK,YAAvB,UACI,sDAAyBR,EAAK3C,QAC9B,8CAA2BoD,IAAfT,EAAK1C,MAAsB,GAAK0C,EAAK1C,MAAMC,SACvD,yEACA,4BAAIyC,EAAKxC,cAET,8BAAG,cAAC,IAAD,IAAY,mBAAGkD,KAAMV,EAAKW,IAAKC,OAAO,SAASC,IAAI,aAAvC,wC,iBC3BzBzE,EAAcC,YAAOC,IAAPD,EAAe,iBAAO,CACtCE,gBAAiB,QACjBC,YAAa,UACbC,MAAO,UACP,UAAW,CACTD,YAAa,eAmBJsE,EAfO,SAAC,GAAmH,IAAjHC,EAAgH,EAAhHA,eAAgBC,EAAgG,EAAhGA,eAAgBC,EAAgF,EAAhFA,cAAejD,EAAiE,EAAjEA,aAAcO,EAAmD,EAAnDA,cAAe2C,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SACtH,OACI,sBAAK3F,UAAW0E,IAAOkB,eAAvB,UACI,yEACA,kEACA,uBAAOC,KAAK,OAAOlG,MAAO4C,EAAcuD,SAAUL,IAChDH,EAAiBC,EAAiB,KAAO,uHAAqE,KAChH,gDACA,uBAAOM,KAAK,OAAOlG,MAAOmD,EAAegD,SAAUJ,IACjDJ,EAAiBE,EAAgB,KAAO,iFAAmD,KAC7F,cAAC,EAAD,CAAatD,QAAQ,WAAWQ,QAASiD,EAAzC,8C,kCCbNhF,EAAcC,YAAOC,IAAPD,EAAe,iBAAO,CACtCE,gBAAiB,QACjBC,YAAa,UACbC,MAAO,UACP,UAAW,CACTD,YAAa,eAyDJgF,EArDM,SAAC,GAAgD,IAA/CxD,EAA8C,EAA9CA,aAAcO,EAAgC,EAAhCA,cAAekD,EAAiB,EAAjBA,YAExCpG,EAAsBc,qBAAWnC,GAAjCqB,kBAER,EAA4CjB,oBAAS,GAArD,mBAAO2G,EAAP,KAAuBW,EAAvB,KAEA,EAAsCtH,oBAAS,GAA/C,mBAAOuH,EAAP,KAAoBC,EAApB,KAKA,EAA8CxH,oBAAS,GAAvD,mBAAOyH,EAAP,KAAwBC,EAAxB,KAwBA,OACI,qCACED,EAAkB,cAAC,IAAD,CAAUpE,GAAG,MAAS,KAC1C,uBAAMhC,UAAW0E,IAAOkB,eAAgBU,SA1BnB,SAACvC,GAGtB,GAFAA,EAAEwC,iBACFN,GAAkB,GACfC,EAAa,CACZ,IAAMM,EAAoB,CACtBhF,UAAWwE,EAAYxF,GACvB+B,eACAO,iBAEJ3D,MAAM,yCAA0C,CAC5CsH,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUL,KAExBpH,MAAK,WACFQ,IACAyG,GAAmB,QAQ3B,UACI,yDACA,8BAAG,cAAC,IAAD,IAAH,IAAwB9D,EAAxB,aACA,8BAAG,cAAC,IAAD,IAAH,IAA2BO,KAC3B,kCACA,uBAAO+C,KAAK,WAAWiB,UAASZ,EAA4BJ,SApCpC,SAAC/B,GAC/BoC,EAAepC,EAAEoB,OAAO2B,YAkClB,oEAIExB,EAAiBY,EAAc,KAAO,sGAA8D,KACtG,cAAC,EAAD,CAAaL,KAAK,SAAS3D,QAAQ,WAAnC,+BCYG6E,EAnEA,WAEX,IAAMvG,EAAOwG,cAAPxG,GACN,EAAuCE,qBAAWnC,GAA1CK,EAAR,EAAQA,SAAUE,EAAlB,EAAkBA,iBAElB,EAAgCH,mBAAS,IAAzC,mBAAOsI,EAAP,KAAiBC,EAAjB,KACAhI,qBAAU,WACN,IAAI,IAAIoC,EAAI,EAAGA,EAAI1C,EAAS2C,OAAQD,IAE7B1C,EAAS0C,GAAGd,IAAMA,GACjB0G,EAAYtI,EAAS0C,MAG9B,CAACd,EAAI5B,IAER,MAAwCD,mBAAS,IAAjD,mBAAO4D,EAAP,KAAqB4E,EAArB,KACA,EAAwDxI,oBAAS,GAAjE,mBAAOyI,EAAP,KAA6BC,EAA7B,KAYA,EAA0C1I,mBAAS,IAAnD,mBAAOmE,EAAP,KAAsBwE,EAAtB,KACA,EAA0D3I,oBAAS,GAAnE,mBAAO4I,EAAP,KAA8BC,EAA9B,KAaA,EAAgD7I,oBAAS,GAAzD,mBAAO8I,EAAP,KAAyBC,EAAzB,KACA,EAA4C/I,oBAAS,GAArD,mBAAO2G,EAAP,KAAuBW,EAAvB,KAUA,OACI,mCACMnH,EAAmB,sBAAKkB,UAAW4E,IAAa+C,cAA7B,UACjB,cAAC,EAAD,CAAWpD,KAAM0C,IACfQ,EACE,cAAC,EAAD,CAAczB,YAAaiB,EAAU1E,aAAcA,EAAcO,cAAeA,IAEhF,cAAC,EAAD,CAAewC,eAAgBA,EAAgBC,eAAgB6B,EAAsB5B,cAAe+B,EAAuBhF,aAAcA,EAAcO,cAAeA,EAAe2C,UA3CvK,SAAC1B,GAC3B,IAAMpE,EAAQoE,EAAEoB,OAAOxF,MACvBwH,EAAgBxH,GACF,kCACLiI,KAAKjI,IAAUA,GAAS,IAAOA,GAAS,KAC7C0H,GAAwB,GAExBA,GAAwB,IAoCuM3B,SA9BxM,SAAC3B,GAC5B,IAAMpE,EAAQoE,EAAEoB,OAAOxF,MACvB2H,EAAiB3H,GAEH,gDACLiI,KAAKjI,GACV6H,GAAyB,GAEzBA,GAAyB,IAsBwO7B,SAhB/O,WAClBL,GACAW,GAAkB,GAEnBmB,GAAwBG,GACvBG,GAAoB,SAaX,cAAC,EAAD,OChDNG,EArBH,WAIR,OACI,cAAC,IAAD,UACA,qBAAK7H,UAAU,UAAf,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAO8H,OAAK,EAACC,KAAK,IAAlB,SACI,cAAC,EAAD,CAAgB/E,aAAc,OAGlC,cAAC,IAAD,CAAO8E,OAAK,EAACC,KAAK,gBAAlB,SACI,cAAC,EAAD,cCVpBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.e60a263f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"resultsWrapper\":\"paginated_resultsWrapper___tI-b\",\"navigator\":\"paginated_navigator__hr5sz\",\"repoWrapper\":\"paginated_repoWrapper__1Z9Xh\",\"button\":\"paginated_button__kY-wE\",\"investorsList\":\"paginated_investorsList__3Ldl8\",\"investorsListHeader\":\"paginated_investorsListHeader__3v_nw\",\"toggleVisibilityList\":\"paginated_toggleVisibilityList__3wog1\",\"investorsListDonations\":\"paginated_investorsListDonations__1V_dp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"goBackBtn\":\"invest_goBackBtn__2KL7g\",\"investWrapper\":\"invest_investWrapper__18JgR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"declareWrapper\":\"investAmount_declareWrapper__2m4fI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"aboutRepo\":\"aboutRepo_aboutRepo__2iAeu\",\"repoDetails\":\"aboutRepo_repoDetails__1XBMU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingWrapper\":\"loading_loadingWrapper__2GaLL\"};","import { createContext, useEffect, useState } from \"react\";\n\nexport const AppContext = createContext();\n\nconst AppProvider = ({children}) => {\n\n    const [repoList, setRepoList] = useState([])\n    const [isRepoListLoaded, setIsRepoListLoaded] = useState(false)\n\n    const handleMustRefresh = () => {\n        fetch('http://localhost:5000/getInvestorsList')\n        .then(response => response.json())\n        .then(data => {\n            setInvestorsList(data)\n        })\n    }\n\n    const [investorsList, setInvestorsList] = useState([])\n    useEffect(() => {\n        fetch('http://localhost:5000/getRepoList')\n        .then(response => response.json())\n        .then(data => {\n            setRepoList(data);\n            setIsRepoListLoaded(true)\n        })\n\n        fetch('http://localhost:5000/getInvestorsList')\n        .then(response => response.json())\n        .then(data => {\n            setInvestorsList(data)\n        })\n    }, [])\n\n\n    const [lastPageOpened, setLastPageOpened] = useState(0)\n    const handleSetLastPageOpened = (index) => {\n        setLastPageOpened(index)\n    }\n    \n    return ( \n        <AppContext.Provider value={{ handleMustRefresh, investorsList, repoList, isRepoListLoaded, lastPageOpened, handleSetLastPageOpened }}>\n            {children}\n        </AppContext.Provider>\n     );\n}\n \nexport default AppProvider;\n\n","import PuffLoader from 'react-spinners/PuffLoader'\nimport loaderStyles from '../../Styles/loading.module.css'\n\nconst Loading = () => {\n    return ( \n        <div className={loaderStyles.loadingWrapper}>\n            <PuffLoader size={150}/>\n            <p>Ładuje zawartość strony...</p>\n        </div>\n     );\n}\n \nexport default Loading;","import { useContext, useState, useEffect } from \"react\";\nimport { AppContext } from \"../../Context/AppContext\";\nimport ReactPaginate from 'react-paginate';\nimport Button from '@mui/material/Button';\nimport { styled } from '@mui/material/styles';\nimport { Link } from \"react-router-dom\";\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\n\nimport paginatedStyles from '../../Styles/paginated.module.css'\nimport '../../Styles/preStyledPaginated.css'\n\nimport Loading from \"../ContentLoader/Loading\";\n\n  const Items = ({ currentItems }) => {\n    return (\n      <>\n        {currentItems && currentItems.map((item) => <DisplayItems key={item.id} data={item}/>)}\n      </>\n    );\n  }\n\n  const DisplayItems = ({ data }) => {\n\n    const { investorsList } = useContext(AppContext)\n\n    const ColorButton = styled(Button)(() => ({\n      backgroundColor: 'white',\n      borderColor: '#6cc644',\n      color: '#6cc644',\n      '&:hover': {\n        borderColor: '#6cc644',\n      }\n    }));\n\n    const [isInvestorListVisible, setIsInvestorListVisible] = useState(false)\n    const handleToggleIsInvestorListVisible = () => {\n      setIsInvestorListVisible(!isInvestorListVisible)\n    }\n\n    const [repoInvestorsList, setRepoInvestorsList] = useState([])\n    useEffect(() => {\n      const getInvestorsArray = []\n\n      for(let i = 0; i < investorsList.length; i++) {\n        if(investorsList[i].projectID === data.id) {\n          getInvestorsArray.push(investorsList[i])\n        }\n      }\n      setRepoInvestorsList(getInvestorsArray)\n      // eslint-disable-next-line\n    }, [investorsList])\n\n    const handleDisplatInvestAmount = () => {\n      let sum = 0;\n      for(let s = 0; s<repoInvestorsList.length; s++) {\n        sum = sum + parseFloat(repoInvestorsList[s].investAmount)\n      }\n      return sum\n    }\n\n      return ( \n        <div className={paginatedStyles.repoWrapper}>\n            <h2>Nazwa Repozytorium: {data.name}</h2>\n            <h3>Autor: {data.owner.login}</h3>\n            <span>Trochę informacji o repozytorium</span>\n            <p>{data.description}</p>\n            <Link to={`/inwestuj/${data.id}`} className={paginatedStyles.button}><ColorButton variant=\"outlined\" color='secondary'>Zainwestuj</ColorButton></Link>\n           \n            { repoInvestorsList.length === 0 ? <p>Nikt jeszcze nie zainwestował w to repozytorium, możesz być pierwszy</p> :  \n            <div className={paginatedStyles.investorsList}>\n              <div className={paginatedStyles.investorsListHeader}>\n                <p>Liczba inwestorów: <b>{repoInvestorsList.length}</b></p>\n                <p>Suma zainwestowanych środków: <b>{handleDisplatInvestAmount()}zł</b></p>\n              </div>\n              <div className={paginatedStyles.toggleVisibilityList} onClick={handleToggleIsInvestorListVisible}>\n                { isInvestorListVisible ? <><RemoveIcon />Ukryj listę inwestorów</> : <><AddIcon />Pokaż listę inwestorów</> }\n              </div>\n              {isInvestorListVisible ?\n              <div className={paginatedStyles.investorsListDonations}>\n                { repoInvestorsList.map((investor, i) => <DisplayInvestorRow key={i} data={investor}/>) }\n              </div> : null }\n            </div> }\n            \n        </div>\n       );\n  }\n\n  const DisplayInvestorRow = ({data}) => {\n    return ( \n      <ul>\n        <li>{data.investAmount}zł</li>\n        <li>{data.investorEmail}</li>\n      </ul>\n     );\n  }\n\n  \n  const PaginatedItems = ({ itemsPerPage }) => {\n\n    const { repoList, isRepoListLoaded, lastPageOpened, handleSetLastPageOpened } = useContext(AppContext)\n    const [currentItems, setCurrentItems] = useState(repoList);\n    const [pageCount, setPageCount] = useState(0);\n    const [itemOffset, setItemOffset] = useState(lastPageOpened * itemsPerPage);\n  \n    useEffect(() => {\n      const endOffset = itemOffset + itemsPerPage;\n      setCurrentItems(repoList.slice(itemOffset, endOffset));\n      setPageCount(Math.ceil(repoList.length / itemsPerPage));\n    }, [itemOffset, itemsPerPage, repoList]);\n  \n    const handlePageClick = (e) => {\n      const newOffset = (e.selected * itemsPerPage) % repoList.length;\n      setItemOffset(newOffset);\n      handleSetLastPageOpened(e.selected)\n    };\n  \n    return (\n      <>\n        { isRepoListLoaded ? <> \n        <div className={paginatedStyles.resultsWrapper}>\n          <Items currentItems={currentItems} />\n        </div>\n        <div className={paginatedStyles.navigator}>\n          <ReactPaginate\n            breakLabel=\"...\"\n            nextLabel=\">\"\n            onPageChange={handlePageClick}\n            pageRangeDisplayed={1}\n            pageCount={pageCount}\n            previousLabel=\"<\"\n            renderOnZeroPageCount={null}\n            forcePage={lastPageOpened}\n          />\n        </div></> : <Loading /> }\n      </>\n    );\n  }\n\n  export default PaginatedItems;","import styles from '../../Styles/aboutRepo.module.css'\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport investStyles from '../../Styles/invest.module.css'\nimport { useHistory } from 'react-router-dom';\nimport Button from '@mui/material/Button';\nimport { styled } from '@mui/material/styles';\n\nimport LinkIcon from '@mui/icons-material/Link';\n\nconst ColorButton = styled(Button)(() => ({\n    backgroundColor: 'white',\n    borderColor: '#6cc644',\n    color: '#6cc644',\n    '&:hover': {\n      borderColor: '#6cc644',\n    }\n  }));\n\nconst AboutRepo = ({ repo }) => {\n\n    const history = useHistory()\n\n    return ( \n        <div className={styles.aboutRepo}>\n            <ColorButton variant='outlined' className={investStyles.goBackBtn} onClick={history.goBack}><ArrowBackIcon /> Powrót do listy</ColorButton>\n            <div className={styles.repoDetails}>\n                <h2>Nazwa Repozytorium: {repo.name}</h2>\n                <h3>Autor: {repo.owner === undefined ? '' : repo.owner.login}</h3>\n                <span>Trochę informacji o repozytorium</span>\n                <p>{repo.description}</p>\n\n                <p><LinkIcon /><a href={repo.url} target='_blank' rel=\"noreferrer\">Link do projektu</a></p>\n            </div>\n        </div>\n     );\n}\n \nexport default AboutRepo;","import styles from '../../Styles/investAmount.module.css'\nimport Button from '@mui/material/Button';\nimport { styled } from '@mui/material/styles';\n\nconst ColorButton = styled(Button)(() => ({\n    backgroundColor: 'white',\n    borderColor: '#6cc644',\n    color: '#6cc644',\n    '&:hover': {\n      borderColor: '#6cc644',\n    }\n  }));\n\nconst DeclareInvest = ({ isValidationOn, amountAccepted, emailAccepted, investAmount, investorEmail, setAmount, setEmail, nextStep }) => {\n    return ( \n        <div className={styles.declareWrapper}>\n            <h2>Chcesz zainwestować w ten projekt?</h2>\n            <label>Ile chcesz zainwestować?</label>\n            <input type=\"text\" value={investAmount} onChange={setAmount} />\n            { isValidationOn ? amountAccepted ? null : <span>Wartość musi być liczbą z zakresu od 0.10zł do 2500zł</span> : null }\n            <label>Adres email</label>\n            <input type=\"text\" value={investorEmail} onChange={setEmail} />\n            { isValidationOn ? emailAccepted ? null : <span>Pole nie spełnia wymagań pola email</span> : null }\n            <ColorButton variant='outlined' onClick={nextStep}>Przjedź do podsumowania</ColorButton>\n        </div>\n     );\n}\n \nexport default DeclareInvest;","import styles from '../../Styles/investAmount.module.css'\nimport AlternateEmailIcon from '@mui/icons-material/AlternateEmail';\nimport AttachMoneyIcon from '@mui/icons-material/AttachMoney';\nimport { useContext, useState } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport Button from '@mui/material/Button';\nimport { styled } from '@mui/material/styles';\nimport { AppContext } from '../../Context/AppContext';\n\nconst ColorButton = styled(Button)(() => ({\n    backgroundColor: 'white',\n    borderColor: '#6cc644',\n    color: '#6cc644',\n    '&:hover': {\n      borderColor: '#6cc644',\n    }\n  }));\n\nconst SubmitInvest = ({investAmount, investorEmail, projectData}) => {\n\n    const { handleMustRefresh } = useContext(AppContext)\n\n    const [isValidationOn, setIsValidationOn] = useState(false)\n\n    const [correctData, setCorrectData] = useState(false)\n    const handleToggleCorrectData = (e) => {\n      setCorrectData(e.target.checked)\n    }\n\n    const [isFormSubmitted, setIsFormSubmitted] = useState(false)\n    const handleSubmitForm = (e) => {\n        e.preventDefault();\n        setIsValidationOn(true)\n        if(correctData) {\n            const newInvestorObject = {\n                projectID: projectData.id,\n                investAmount,\n                investorEmail\n            }\n            fetch('http://localhost:5000/saveInvestorData', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(newInvestorObject)\n            })\n            .then(() => {\n                handleMustRefresh()\n                setIsFormSubmitted(true)\n            })\n        }\n    }\n\n    return ( \n        <>\n        { isFormSubmitted ? <Redirect to='/' /> : null}\n        <form className={styles.declareWrapper} onSubmit={handleSubmitForm}>\n            <h2>Podsumowanie inwestycji</h2>\n            <p><AttachMoneyIcon /> {investAmount}zł</p>\n            <p><AlternateEmailIcon /> {investorEmail}</p>\n            <label>\n            <input type=\"checkbox\" checked={correctData ? true : false} onChange={handleToggleCorrectData}/>\n            Potwierdzam iż powyższe dane są prawidłowe\n            </label>\n            { isValidationOn ? correctData ? null : <span>Aby kontynuować potwierdź że dane są prawdziwe</span> : null }\n            <ColorButton type='submit' variant='outlined'>Zainwestuj</ColorButton>\n        </form>\n        </>\n     );\n}\n \nexport default SubmitInvest;","import { useParams } from \"react-router-dom\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { AppContext } from \"../../Context/AppContext\";\n\nimport Loading from \"../ContentLoader/Loading\";\nimport AboutRepo from \"./AboutRepo\";\nimport DeclareInvest from \"./DeclareInvest\";\nimport SubmitInvest from \"./SubmitInvest\";\n\nimport investStyles from '../../Styles/invest.module.css'\n\nconst Invest = () => {\n\n    let { id } = useParams()\n    const { repoList, isRepoListLoaded } = useContext(AppContext)\n\n    const [repoItem, setRepoItem] = useState({})\n    useEffect(() => {\n        for(let i = 0; i < repoList.length; i++) {\n            // eslint-disable-next-line\n            if(repoList[i].id == id) {\n                setRepoItem(repoList[i])\n            }\n        }\n    }, [id, repoList])\n\n    const [investAmount, setInvestAmount] = useState('')\n    const [investAmountAccepted, setInvestAmountAccepted] = useState(false)\n    const handleSetInvestAmount = (e) => {\n        const value = e.target.value;\n        setInvestAmount(value)\n        const regex = /(^[0-9]{1}[0-9.]{0,5}[0-9]{1}$)/\n        if(regex.test(value) && value >= 0.1 && value <= 2500) {\n            setInvestAmountAccepted(true)\n        }   else {\n            setInvestAmountAccepted(false)\n        }\n    }\n\n    const [investorEmail, setInvestorEmail] = useState('')\n    const [investorEmailAccepted, setInvestorEmailAccepted] = useState(false)\n    const handleSetInvestorEmail = (e) => {\n        const value = e.target.value;\n        setInvestorEmail(value)\n        // eslint-disable-next-line\n        const regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/\n        if(regex.test(value)) {\n            setInvestorEmailAccepted(true)\n        }   else {\n            setInvestorEmailAccepted(false)\n        }\n    }\n\n    const [isAmountDeclared, setIsAmountDeclared] = useState(false)\n    const [isValidationOn, setIsValidationOn] = useState(false)\n    const handleGoToSummary = () => {\n        if(!isValidationOn) {\n            setIsValidationOn(true)\n        }\n        if(investAmountAccepted && investorEmailAccepted) {\n            setIsAmountDeclared(true)\n        }\n    }\n\n    return ( \n        <>\n            { isRepoListLoaded ? <div className={investStyles.investWrapper}> \n                <AboutRepo repo={repoItem}/>\n                { isAmountDeclared ?\n                    <SubmitInvest projectData={repoItem} investAmount={investAmount} investorEmail={investorEmail}/>\n                    : \n                    <DeclareInvest isValidationOn={isValidationOn} amountAccepted={investAmountAccepted} emailAccepted={investorEmailAccepted} investAmount={investAmount} investorEmail={investorEmail} setAmount={handleSetInvestAmount} setEmail={handleSetInvestorEmail} nextStep={handleGoToSummary}/>\n                }\n            </div> : <Loading /> }\n        </>\n     );\n}\n \nexport default Invest;","import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport PaginatedItems from './Paginated/PaginatedItems'\nimport Invest from \"./Invest/Invest\";\n\nconst App = () => {\n\n\n\n    return ( \n        <Router>\n        <div className=\"wrapper\">\n            <Switch>\n                <Route exact path='/'>\n                    <PaginatedItems itemsPerPage={10}/>\n                </Route>\n\n                <Route exact path='/inwestuj/:id'>\n                    <Invest />\n                </Route>\n            </Switch>\n        </div>\n        </Router>\n     );\n}\n \nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App'\n\nimport AppProvider from './Context/AppContext'\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}